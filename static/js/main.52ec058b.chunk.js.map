{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","index","className","onClick","decreaseCount","count","addCount","resetCount","deleteCount","App","useState","counters","setCounters","plusOne","console","log","add","decrease","splice","res","r","Math","round","random","newCounter","map","el","i","key","plus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMAsBeA,MAhBf,SAAiBC,GAGb,OACI,wCACaA,EAAMC,MADnB,IAEI,4BAAQC,UAAU,eAAeC,QAAS,kBAAKH,EAAMI,cAAcJ,EAAMC,SAAzE,KACA,8BAAOD,EAAMK,OACb,4BAAQH,UAAU,eAAeC,QAAS,kBAAKH,EAAMM,SAASN,EAAMC,SAApE,KACA,4BAAQC,UAAU,kBAAkBC,QAAS,kBAAKH,EAAMO,WAAWP,EAAMC,SAAzE,sBACA,4BAAQC,UAAU,iBAAiBC,QAAS,kBAAKH,EAAMQ,YAAYR,EAAMC,SAAzE,YC0EGQ,MApFf,WAAgB,IAAD,EACqBC,mBAAS,CAAC,EAAG,GAAI,KADtC,mBACJC,EADI,KACMC,EADN,KAYLC,EAAU,SAACZ,GACba,QAAQC,IAAI,UAAWd,IAGrBK,EAAW,SAACL,GACd,IAAIe,EAAG,YAAOL,GACdK,EAAIf,IAAU,EACdW,EAAYI,IAGVZ,EAAgB,SAACH,GACnB,IAAIgB,EAAQ,YAAON,GACnBM,EAAShB,IAAU,EACnBW,EAAYK,IAGVT,EAAc,SAACP,GACjB,IAAII,EAAK,YAAOM,GAChBN,EAAMa,OAAOjB,EAAO,GACpBW,EAAYP,IASdE,EAAa,SAACN,GAChB,IAAIkB,EAAG,YAAOR,GACdQ,EAAIlB,GAAS,EACbW,EAAYO,IAchB,OACI,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,aAAf,UAEA,4BAAQA,UAAU,kBAAkBC,QAxDrB,WACf,IAAMiB,EAAIC,KAAKC,MAAsB,GAAhBD,KAAKE,UAG1BX,EAAY,GAAD,mBAAKD,GAAL,CAAeS,OAoD1B,eACA,4BAAQlB,UAAU,kBAAkBC,QAZ3B,WACb,IAAMqB,EAAab,EAASc,KAAI,SAACC,GAAD,OAAQ,KACxCd,EAAYY,KAUR,aACA,4BAAQtB,UAAU,iBAAiBC,QAjBzB,WACdS,EAAY,MAgBR,cACA,6BACCD,EAASc,KAAI,SAACC,EAAIC,GAAL,OACT,kBAAC,EAAD,CACOtB,MAAOqB,EACPE,IAAKD,EACL1B,MAAO0B,EACPE,KAAMhB,EACNP,SAAUA,EACVF,cAAeA,EACfI,YAAaA,EACbD,WAAYA,UCpEZuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.52ec058b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\n\nfunction Counter(props) {\n\n    // console.log(props)\n    return (\n        <div>\n            Index: ({props.index})\n            <button className=\"btn btn-info\" onClick={()=> props.decreaseCount(props.index)}>-</button>\n            <span>{props.count}</span>\n            <button className=\"btn btn-info\" onClick={()=> props.addCount(props.index)}>+</button>\n            <button className=\"btn btn-warning\" onClick={()=> props.resetCount(props.index)}>Reset this counter</button>\n            <button className=\"btn btn-danger\" onClick={()=> props.deleteCount(props.index)}>Delete</button>\n\n        </div>\n    );\n}\n\nexport default Counter;","import React, {useState} from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Counter from \"./Counter\";\n\nfunction App() {\n    const [counters, setCounters] = useState([4, 11, 34]);\n    //const [customCounters, setCustomCounters] = useState([])\n\n\n    const addCounter = () => {\n        const r = Math.round(Math.random() * 10);\n        // const updatedCounters = [...counters];\n        // updatedCounters.push({id: uuid(), count: num});\n        setCounters([...counters, r]);\n    };\n\n    const plusOne = (index) => {\n        console.log('plusOne', index);\n    };\n\n    const addCount = (index) => {\n        let add = [...counters];\n        add[index] += 1;\n        setCounters(add);\n    }\n\n    const decreaseCount = (index) => {\n        let decrease = [...counters];\n        decrease[index] -= 1;\n        setCounters(decrease);\n    }\n\n    const deleteCount = (index) => {\n        let count = [...counters];\n        count.splice(index, 1);\n        setCounters(count);\n    }\n    //The Second decision for delete counter (1 row)\n\n    // const deleteCount = (id) => {\n    //     const updatedCounters = counters.filter(el => el.id !== id);\n    //     setCounters(updatedCounters);\n\n\nconst resetCount = (index) => {\n    let res = [...counters];\n    res[index] = 0;\n    setCounters(res);\n}\n\nconst deleteAll = () => {\n    setCounters([]);\n}\n\nconst resetAll = () => {\n    const newCounter = counters.map((el) => 0);\n    setCounters(newCounter);\n}\n\n//const addClickBut = () =>\n\nreturn (\n    <div className=\"App\">\n        <div className=\"container\">\n        Counter\n        <button className=\"btn btn-success\" onClick={addCounter}>Add Counter</button>\n        <button className=\"btn btn-warning\" onClick={resetAll}>Reset All</button>\n        <button className=\"btn btn-danger\" onClick={deleteAll}>Delete All</button>\n        <hr/>\n        {counters.map((el, i) =>\n            (<Counter\n                    count={el}\n                    key={i}\n                    index={i}\n                    plus={plusOne}\n                    addCount={addCount}\n                    decreaseCount={decreaseCount}\n                    deleteCount={deleteCount}\n                    resetCount={resetCount}\n                />\n            ))}\n        </div>\n    </div>\n);\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}